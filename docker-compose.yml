version: '3.8'

services:
  # Kyukei-Panda Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kyukei-panda-app
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - APP_KEY=${APP_KEY}
      - DB_CONNECTION=pgsql
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CACHE_DRIVER=redis
      - SESSION_DRIVER=redis
      - QUEUE_CONNECTION=redis
      - BROADCAST_DRIVER=pusher
      - PUSHER_APP_ID=${PUSHER_APP_ID}
      - PUSHER_APP_KEY=${PUSHER_APP_KEY}
      - PUSHER_APP_SECRET=${PUSHER_APP_SECRET}
      - PUSHER_APP_CLUSTER=${PUSHER_APP_CLUSTER}
    volumes:
      - ./storage:/var/www/html/storage
      - ./bootstrap/cache:/var/www/html/bootstrap/cache
      - app_logs:/var/log
    depends_on:
      - postgres
      - redis
    networks:
      - kyukei-panda-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/api/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: kyukei-panda-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_DATABASE}
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres-init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - kyukei-panda-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_DATABASE}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: kyukei-panda-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - kyukei-panda-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Queue Worker
  queue-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kyukei-panda-queue
    restart: unless-stopped
    command: php artisan queue:work --sleep=3 --tries=3 --max-time=3600
    environment:
      - APP_ENV=production
      - DB_CONNECTION=pgsql
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - QUEUE_CONNECTION=redis
    volumes:
      - ./storage:/var/www/html/storage
    depends_on:
      - postgres
      - redis
    networks:
      - kyukei-panda-network

  # Scheduler (Cron Jobs)
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kyukei-panda-scheduler
    restart: unless-stopped
    command: sh -c "while true; do php artisan schedule:run; sleep 60; done"
    environment:
      - APP_ENV=production
      - DB_CONNECTION=pgsql
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - ./storage:/var/www/html/storage
    depends_on:
      - postgres
      - redis
    networks:
      - kyukei-panda-network

  # WebSocket Server (Laravel Echo Server)
  websocket:
    image: oanhnn/laravel-echo-server:latest
    container_name: kyukei-panda-websocket
    restart: unless-stopped
    ports:
      - "6001:6001"
    environment:
      - LARAVEL_ECHO_SERVER_AUTH_HOST=http://app
      - LARAVEL_ECHO_SERVER_HOST=0.0.0.0
      - LARAVEL_ECHO_SERVER_PORT=6001
      - LARAVEL_ECHO_SERVER_DEBUG=false
    volumes:
      - ./docker/laravel-echo-server.json:/app/laravel-echo-server.json
    depends_on:
      - app
      - redis
    networks:
      - kyukei-panda-network

  # Nginx Load Balancer (for multiple app instances)
  nginx:
    image: nginx:alpine
    container_name: kyukei-panda-nginx
    restart: unless-stopped
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./docker/nginx-lb.conf:/etc/nginx/nginx.conf
      - ./docker/ssl:/etc/nginx/ssl
    depends_on:
      - app
    networks:
      - kyukei-panda-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: kyukei-panda-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - kyukei-panda-network

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: kyukei-panda-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - kyukei-panda-network

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: kyukei-panda-backup
    restart: "no"
    environment:
      - PGPASSWORD=${DB_PASSWORD}
    volumes:
      - ./backups:/backups
      - backup_scripts:/scripts
    command: |
      sh -c "
        echo '0 2 * * * pg_dump -h postgres -U ${DB_USERNAME} -d ${DB_DATABASE} > /backups/kyukei-panda-\$(date +%Y%m%d_%H%M%S).sql' > /etc/crontabs/root &&
        echo '0 3 * * 0 find /backups -name \"*.sql\" -mtime +30 -delete' >> /etc/crontabs/root &&
        crond -f
      "
    depends_on:
      - postgres
    networks:
      - kyukei-panda-network

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  backup_scripts:
    driver: local

# Networks
networks:
  kyukei-panda-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
